#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
from scipy.sparse import *
from scipy import linalg
import disciplina

# Para melhor legibilidade
aulas_por_dia = 4
dias_por_semana = 5
qtd_disciplinas = 44
disc_inativas = set([0, 36, 41, 42])

'''
Colunas: disciplinas
Linhas: aulas em ordem cronológica (seg1, seg2, ..., sex3, sex4)
Elementos: {
	0: sem aula da disciplina nesse dia
	1: com aula da disciplina nesse dia
	2: disciplina inativa ou não ofertada 
}
'''

horario = np.array([
	map(int, "000001000100000101000100000010000100001000000"),
	map(int, "000001000100000101000100000010000100001000000"),
	map(int, "010000000010010000100001000000101000000100000"),
	map(int, "010000000010010000100001000000101000000100000"),
	map(int, "001000100001000000010000011000010000000000010"),
	map(int, "001000100001000000010000011000010000000000010"),
	map(int, "010000000010100010000010000100000000010000001"),
	map(int, "010000000010100010000010000100000000010000001"),
	map(int, "000100000100001010000001000001010010000000000"),
	map(int, "000100000100001010000001000001010010000000000"),
	map(int, "000001010000000100010000100000100010001000000"),
	map(int, "000001010000000100010000100000100010001000000"),
	map(int, "001000100001000001000110000010001000000010000"),
	map(int, "001000100001000001000110000010001000000010000"),
	map(int, "000010010000001000001000001000000001000100000"),
	map(int, "000010010000001000001000001000000001000100000"),
	map(int, "000010001000010000001000010001000001010000000"),
	map(int, "000010001000010000001000010001000001010000000"),
	map(int, "000100001000100000100000100100000100000010000"),
	map(int, "000100001000100000100000100100000100000010000")
]).T

'''
Matriz de dependências (MD), incluindo a disciplina nula (se o elemento a_ij == 1,
então a disciplina i depende da disciplina j,
caso contrário, a_ij == 0).
TODO: testar formatos de matriz esparsa (http://docs.scipy.org/doc/scipy/reference/sparse.html#sparse-matrix-classes). 
'''
dependencias = np.array([
	map(int, "011111011100001001011010000010011011111000111"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000100010000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000010000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000001000100000000000100000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000100000000000000000100000000000000"),
	map(int, "000000000000010000000000100000000000000000000"),
	map(int, "000000000000000010000101000000000000000000000"),
	map(int, "000000000000000000000000000000100000000000000"),
	map(int, "000000000000000000000000100000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000100000000000000000000000000"),
	map(int, "000000000000000000000100000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000001000"),
	map(int, "000000000000000000000000001000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000001000000000000010000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000001000000000000000"),
	map(int, "000000000000000000000000000000000100000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000100000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000"),
	map(int, "000000000000000000000000000000000000000000000")
])

# Histórico: lista de disciplinas em que o aluno foi aprovado
historico = np.array(map(int,
#"100000000000000000000000000000000000000000000"
"101111111111111111011111110110000001000000011"	# Allan Denis
#"111111111111111111111000000000000000000000000" # Arthur Novaes, Leilton
#"111111111111111111101111111111100000010000011" # Hercílio
#"111111111101101111111011000000000010000000000" # Bruno Antonelly
#"101101111111110101001011100110100001000000000" # Lucas
#"111101111111110110101011100000100000000000010" # Kyo
#"111111111101101111111011000000000010000000000" # Ernande
#"111111101111111111111011100000000000000000000" # Nywton
#"111111111111111111111111111111100000000000000" # Márcio
#"111101111111111111111111100000100000000000011"	# Denis Vieira
))

assert False not in [x in (0,1) for x in historico], "O histórico contém valores inválidos."
assert dependencias.shape == (qtd_disciplinas + 1, qtd_disciplinas + 1), "A matriz de dependências tem dimensões incorretas."
assert set(dependencias.flat) == set([0,1]), "A matriz de dependências contém valores inválidos."
assert historico.shape[0] == qtd_disciplinas + 1, "Histórico com tamanho diferente do número de disciplinas."
assert horario.shape[0] == qtd_disciplinas + 1, "Horário com tamanho diferente do número de disciplinas."
